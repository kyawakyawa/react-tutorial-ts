{"version":3,"sources":["index.tsx"],"names":["calculateWinner","squares","line","a","b","c","Square","props","className","onClick","value","Board","i","this","state","slice","xIsNext","setState","renderSquare","React","Component","Game","history","Array","fill","stepNumber","length","concat","step","status","current","winner","moves","map","move","desc","jumpTo","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.17aee967.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\ntype SquareProps = {\n  value: string;\n  onClick: () => void;\n};\n\ntype BoardState = {\n  squares: string[];\n  xIsNext: boolean;\n};\n\ntype BoardProps = {\n  squares: string[];\n  onClick: (arg0: number) => void;\n};\n\ntype GameState = {\n  history: { squares: string[] }[];\n  stepNumber: number;\n  xIsNext: boolean;\n};\n\nfunction calculateWinner(squares: string[]) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let line of lines) {\n    const [a, b, c] = line;\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n/*\nclass Square extends React.Component<SquareProps, {}> {\n  constructor(props: SquareProps) {\n    super(props);\n  }\n  render() {\n    return (\n      <button className=\"square\" onClick={() => this.props.onClick()}>\n        {this.props.value}\n      </button>\n    );\n  }\n}*/\n\nfunction Square(props: SquareProps) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component<BoardProps, BoardState> {\n  /*\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      xIsNext: true,\n    };\n  }\n  */\n\n  handleClick(i: number) {\n    const squares = this.state.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = \"X\";\n    squares[i] = \"O\";\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({ squares: squares, xIsNext: !this.state.xIsNext });\n  }\n\n  renderSquare(i: number) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component<{}, GameState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null),\n        },\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n    };\n  }\n\n  handleClick(i: number) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: history.concat([{ squares: squares }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(step: number) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0,\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      const desc = move ? \"Go to move #\" + move : \"Go to game start\";\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else {\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}